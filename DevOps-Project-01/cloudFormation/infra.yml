---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete 3-Tier Infrastructure with Load Balancer'

Parameters:
  KeyName:
    Type: String
    Default: "devops-p1-keypair"
    Description: "Name of an existing EC2 KeyPair to enable SSH access"
  
  InstanceType:
    Type: String
    Default: "t3.medium"
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
    Description: "EC2 instance type"

  DBPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: "Database master password (min 8 characters)"

Resources:

  # VPC
  EC2VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: "devops_p1_vpc"

  # Network ACLs
  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "Name"
          Value: "pub_sub_acl"

  PrivateNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "Name"
          Value: "prv_sub_acl"

  RDSNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "Name"
          Value: "rds_acl"

  # Public Network ACL Rules
  PublicNetworkAclEntryInboundHTTP:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 80
        To: 80

  PublicNetworkAclEntryInboundHTTPS:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 443
        To: 443

  PublicNetworkAclEntryInboundSSH:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 22
        To: 22

  PublicNetworkAclEntryInboundEphemeral:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 130
      Protocol: 6
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 1024
        To: 65535

  PublicNetworkAclEntryOutbound:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"
      Egress: true

  # Private Network ACL Rules (App Tier - subnets 10.0.2.0/24 & 10.0.5.0/24)
  PrivateNetworkAclEntryInboundFromPublic1:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: "10.0.1.0/24"  # From Public Subnet 1a

  PrivateNetworkAclEntryInboundFromPublic2:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 110
      Protocol: -1
      RuleAction: allow
      CidrBlock: "10.0.4.0/24"  # From Public Subnet 1b

  PrivateNetworkAclEntryInboundFromBastion:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      CidrBlock: "10.0.1.0/24"  # SSH from Bastion in Public Subnet 1a
      PortRange:
        From: 22
        To: 22

  PrivateNetworkAclEntryInboundEphemeral:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 130
      Protocol: 6
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 1024
        To: 65535

  PrivateNetworkAclEntryOutbound:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"
      Egress: true

  # RDS Network ACL Rules (DB Tier - subnets 10.0.3.0/24 & 10.0.6.0/24)
  RDSNetworkAclEntryInboundMySQLFromApp1:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref RDSNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: "10.0.2.0/24"  # From App Subnet 1a
      PortRange:
        From: 3306
        To: 3306

  RDSNetworkAclEntryInboundMySQLFromApp2:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref RDSNetworkAcl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      CidrBlock: "10.0.5.0/24"  # From App Subnet 1b
      PortRange:
        From: 3306
        To: 3306

  RDSNetworkAclEntryInboundMySQLFromBastion:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref RDSNetworkAcl
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      CidrBlock: "10.0.1.0/24"  # From Bastion in Public Subnet 1a
      PortRange:
        From: 3306
        To: 3306

  RDSNetworkAclEntryInboundEphemeral:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref RDSNetworkAcl
      RuleNumber: 130
      Protocol: 6
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 1024
        To: 65535

  RDSNetworkAclEntryOutbound:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref RDSNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"
      Egress: true

  # Network ACL Associations
  PublicSubnet1aNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1a
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnet1bNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1b
      NetworkAclId: !Ref PublicNetworkAcl

  PrivateSubnet1aNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1a
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet1bNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1b
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet2aNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2a
      NetworkAclId: !Ref RDSNetworkAcl

  PrivateSubnet2bNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2b
      NetworkAclId: !Ref RDSNetworkAcl

  # Internet Gateway
  EC2InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "devops_ig"

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref EC2VPC
      InternetGatewayId: !Ref EC2InternetGateway

  # Public Subnets
  PublicSubnet1a:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref EC2VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "pub_sub_1a"

  PublicSubnet1b:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref EC2VPC
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "pub_sub_1b"

  # Private Subnets - Group 1 (App Tier)
  PrivateSubnet1a:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref EC2VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: "prv1_sub_1a"

  PrivateSubnet1b:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref EC2VPC
      CidrBlock: "10.0.5.0/24"
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: "prv1_sub_1b"

  # Private Subnets - Group 2 (DB Tier)
  PrivateSubnet2a:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref EC2VPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: "prv2_sub_1a"

  PrivateSubnet2b:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref EC2VPC
      CidrBlock: "10.0.6.0/24"
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: "prv2_sub_1b"

  # Elastic IP for NAT Gateway
  NATGatewayEIP1b:
    Type: "AWS::EC2::EIP"
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: "Name"
          Value: "natgt_1b_eip"

  # NAT Gateway (only in 1b)
  NATGateway1b:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NATGatewayEIP1b.AllocationId
      SubnetId: !Ref PublicSubnet1b
      Tags:
        - Key: "Name"
          Value: "natgt_1b"

  # Route Tables
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "Name"
          Value: "pub_rt"

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "Name"
          Value: "prv_rt"

  # Routes
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref EC2InternetGateway

  PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway1b

  # Route Table Associations - Public Subnets
  PublicSubnet1aAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1a
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1bAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1b
      RouteTableId: !Ref PublicRouteTable

  # Route Table Associations - Private Subnets
  PrivateSubnet1aAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1a
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2aAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2a
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet1bAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1b
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2bAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2b
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  PublicSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "pub_subs_sg"
      GroupDescription: "Security group for public subnets (web servers)"
      VpcId: !Ref EC2VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          Description: "SSH access from bastion host"
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: "HTTP access from ALB"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: "HTTPS access from ALB"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
          Description: "All outbound traffic"
      Tags:
        - Key: "Name"
          Value: "pub_subs_sg"

  # NEW: Bastion Security Group
  BastionSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "bastion_sg"
      GroupDescription: "Security group for bastion host"
      VpcId: !Ref EC2VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
          Description: "SSH access"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Name"
          Value: "bastion_sg"

  # NEW: ALB Security Group
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "alb_sg"
      GroupDescription: "Security group for Application Load Balancer"
      VpcId: !Ref EC2VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
          Description: "HTTP access"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
          Description: "HTTPS access"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
          Description: "HTTP to targets"
      Tags:
        - Key: "Name"
          Value: "alb_sg"

  PrivateSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "prv_sub_sg"
      GroupDescription: "Security group for private subnets (app servers)"
      VpcId: !Ref EC2VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          Description: "SSH from bastion host"
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref PublicSecurityGroup
          Description: "Any TCP from web servers"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
          Description: "All outbound traffic"
      Tags:
        - Key: "Name"
          Value: "prv_sub_sg"

  RDSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "rds_sg"
      GroupDescription: "Security group for RDS database"
      VpcId: !Ref EC2VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref PrivateSecurityGroup
          Description: "MySQL access from app servers"
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          Description: "MySQL access from bastion host"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Name"
          Value: "rds_sg"

  # NEW: Application Load Balancer
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "devops-1-alb"
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1a
        - !Ref PublicSubnet1b
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
        - Key: deletion_protection.enabled
          Value: "false"
      Tags:
        - Key: "Name"
          Value: "devops-1-alb"

  # NEW: Target Group for Web Servers
  WebServersTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: "web-servers-tg"
      Protocol: HTTP
      Port: 80
      VpcId: !Ref EC2VPC
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      Targets:
        - Id: !Ref WebServer1
          Port: 80
        - Id: !Ref WebServer2
          Port: 80
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "300"
        - Key: stickiness.enabled
          Value: "false"
        - Key: stickiness.type
          Value: "lb_cookie"
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "86400"
      Tags:
        - Key: "Name"
          Value: "web-servers-tg"

  # NEW: ALB Listener
  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebServersTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Web Server Instances
  WebServer1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-00ca32bbc84273381"  # Amazon Linux 2023
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
      SubnetId: !Ref PublicSubnet1a
      Tags:
        - Key: "Name"
          Value: "web-server-1a"
        - Key: "Tier"
          Value: "Web"

  WebServer2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-00ca32bbc84273381"  # Amazon Linux 2023
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
      SubnetId: !Ref PublicSubnet1b
      Tags:
        - Key: "Name"
          Value: "web-server-1b"
        - Key: "Tier"
          Value: "Web"

  # App Server Instances
  AppServer1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-00ca32bbc84273381"  # Amazon Linux 2023
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      SubnetId: !Ref PrivateSubnet1a
      Tags:
        - Key: "Name"
          Value: "app-server-1a"
        - Key: "Tier"
          Value: "Application"

  AppServer2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-00ca32bbc84273381"  # Amazon Linux 2023
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      SubnetId: !Ref PrivateSubnet1b
      Tags:
        - Key: "Name"
          Value: "app-server-1b"
        - Key: "Tier"
          Value: "Application"

  # Bastion Host - Updated to use new security group
  BastionHost:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-00ca32bbc84273381"  # Amazon Linux 2023
      InstanceType: t3.medium
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      SubnetId: !Ref PublicSubnet1a
      Tags:
        - Key: "Name"
          Value: "bastion-host"

  # S3 Bucket for Java Artifacts
  JavaArtifactsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "my-java-artifacts-${AWS::StackName}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: "Name"
          Value: "my-java-artifacts-fools"
        - Key: "Purpose"
          Value: "Java Application Artifacts"

  # DB Subnet Group
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: "devops-db-subnet-group"
      DBSubnetGroupDescription: "Subnet group for RDS database"
      SubnetIds:
        - !Ref PrivateSubnet2a
        - !Ref PrivateSubnet2b
      Tags:
        - Key: "Name"
          Value: "devops-db-subnet-group"

  # RDS Database
  RDSDatabase:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: Delete
    Properties:
      DBInstanceIdentifier: "loginapp"
      DBInstanceClass: "db.t3.micro"
      Engine: "mysql"
      EngineVersion: "8.0.42"
      MasterUsername: "admin"
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 20
      StorageType: "gp3"
      StorageEncrypted: false
      MultiAZ: false
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7
      DeletionProtection: false
      Tags:
        - Key: "Name"
          Value: "loginapp-db"

Outputs:
  VPCId:
    Description: "VPC ID"
    Value: !Ref EC2VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC-ID"

  PublicSubnets:
    Description: "Public Subnets"
    Value: !Join [",", [!Ref PublicSubnet1a, !Ref PublicSubnet1b]]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnets"

  PrivateSubnets:
    Description: "Private Subnets"
    Value: !Join [",", [!Ref PrivateSubnet1a, !Ref PrivateSubnet1b, !Ref PrivateSubnet2a, !Ref PrivateSubnet2b]]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnets"

  BastionHostPublicIP:
    Description: "Bastion Host Public IP"
    Value: !GetAtt BastionHost.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-Bastion-IP"

  RDSEndpoint:
    Description: "RDS Database Endpoint"
    Value: !GetAtt RDSDatabase.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-RDS-Endpoint"

  # NEW: Load Balancer DNS Name
  LoadBalancerDNS:
    Description: "Application Load Balancer DNS Name"
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-ALB-DNS"

  LoadBalancerArn:
    Description: "Application Load Balancer ARN"
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub "${AWS::StackName}-ALB-ARN"