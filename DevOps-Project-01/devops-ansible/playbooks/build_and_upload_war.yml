---
- name: Build and upload WAR file from bastion host
  hosts: bastion
  become: true

  vars_files:
    - ../group_vars/all.yml
    - ../group_vars/bastion.yml
    
  tasks:
    - name: Install build dependencies
      dnf:
        name:
          - git
          - maven
          - "{{ java_package }}"
        state: present

    - name: Check if project already exists
      stat:
        path: "{{ work_dir }}"
      register: project_exists

    - name: Clone repository if not exists
      git:
        repo: "{{ repo_url }}"
        dest: "{{ repo_dest }}/repo_tmp"
        version: master
        depth: 1
        single_branch: true
        force: true
      when: not project_exists.stat.exists

    - name: Configure sparse checkout for Java app only
      shell: |
        cd {{ repo_dest }}/repo_tmp
        git sparse-checkout init --cone
        git sparse-checkout set DevOps-Project-01/Java-Login-App
      when: not project_exists.stat.exists

    - name: Copy Java application to work directory
      copy:
        src: "{{ repo_dest }}/repo_tmp/DevOps-Project-01/{{ java_repo_name }}/"
        dest: "{{ work_dir }}/"
        remote_src: true
        mode: preserve
      when: not project_exists.stat.exists

    - name: Clean up temporary repository
      file:
        path: "{{ repo_dest }}/repo_tmp"
        state: absent
      when: not project_exists.stat.exists

    - name: Update application.properties with database config
      template:
        src: ../templates/application.properties.j2
        dest: "{{ work_dir }}/src/main/resources/application.properties"
        backup: true

    - name: Clean previous build
      command: mvn clean
      args:
        chdir: "{{ work_dir }}"
      environment:
        JAVA_HOME: /usr/lib/jvm/java-17-amazon-corretto

    - name: Build WAR file with Maven
      command: mvn package -DskipTests
      args:
        chdir: "{{ work_dir }}"
      environment:
        JAVA_HOME: /usr/lib/jvm/java-17-amazon-corretto
      register: maven_build

    - name: Verify WAR file was created
      stat:
        path: "{{ work_dir }}/target/{{ war_name }}"
      register: war_file

    - name: Fail if WAR file not found
      fail:
        msg: "WAR file {{ war_name }} was not created in target directory"
      when: not war_file.stat.exists

    - name: Upload WAR file to S3
      aws_s3:
        bucket: "{{ s3_bucket }}"
        object: "{{ war_name }}"
        src: "{{ work_dir }}/target/{{ war_name }}"
        mode: put
      become_user: ec2-user

    - name: Display build success message
      debug:
        msg: 
          - "WAR file built successfully: {{ war_name }}"
          - "Uploaded to S3 bucket: {{ s3_bucket }}"
