---
- name: Deploy WAR from S3 to Tomcat app servers
  hosts: appservers
  become: true

  vars_files:
    - ../group_vars/all.yml
    - ../group_vars/appservers.yml

  tasks:
    - name: Install required packages for S3 access
      dnf:
        name:
          - python3
          - python3-pip
          - awscli
        state: present

    - name: Install boto3 for aws_s3 module
      pip:
        name:
          - boto3
          - botocore
        executable: pip3

    - name: Create AWS credentials directory
      file:
        path: /home/ec2-user/.aws
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: '0700'

    - name: Configure AWS credentials
      copy:
        dest: "/home/ec2-user/.aws/credentials"
        content: |
          [default]
          aws_access_key_id = {{ aws_access_key_id }}
          aws_secret_access_key = {{ aws_secret_access_key }}
          aws_session_token = {{ aws_session_token }}
        owner: ec2-user
        group: ec2-user
        mode: '0600'

    - name: Configure AWS region
      copy:
        dest: "/home/ec2-user/.aws/config"
        content: |
          [default]
          region = {{ aws_region }}
        owner: ec2-user
        group: ec2-user
        mode: '0600'

    - name: Stop Tomcat before deployment
      systemd:
        name: tomcat
        state: stopped

    - name: Remove old application files
      file:
        path: "{{ tomcat_webapps }}/{{ war_name | regex_replace('\\.war$', '') }}"
        state: absent

    - name: Remove old WAR file
      file:
        path: "{{ tomcat_webapps }}/{{ war_name }}"
        state: absent

    - name: Download WAR file from S3
      aws_s3:
        bucket: "{{ s3_bucket }}"
        object: "{{ war_name }}"
        dest: "/tmp/{{ war_name }}"
        mode: get
      become_user: ec2-user

    - name: Deploy WAR to Tomcat webapps
      copy:
        src: "/tmp/{{ war_name }}"
        dest: "{{ tomcat_webapps }}/{{ war_name }}"
        owner: tomcat
        group: tomcat
        mode: "0644"
        remote_src: true

    - name: Start Tomcat service
      systemd:
        name: tomcat
        state: started

    - name: Wait for Tomcat to start
      wait_for:
        port: 8080
        delay: 10
        timeout: 60

    - name: Verify application deployment
      uri:
        url: "http://localhost:8080/{{ war_name | regex_replace('\\.war$', '') }}"
        method: GET
        status_code: [200, 302]
      retries: 5
      delay: 10
      register: app_check

    - name: Clean up temporary files
      file:
        path: "/tmp/{{ war_name }}"
        state: absent

    - name: Display deployment status
      debug:
        msg: "Application deployed successfully and is responding on port 8080"
      when: app_check is succeeded
